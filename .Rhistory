mutate(`Production action` = paste(production1, production2, sep=" ")) %>%
mutate(state1_max = state1 + 1,
state2_max = state2 + 1)
# Optimal maintenance with rectangles
opt_maintenance_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=`Maintenance action`)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_maintenance_plot2)
# Plot optimal production with rectangles
opt_production_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=`Production action`)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_production_plot2)
# Combine both plots
optimalPolicy_wide = dcast(optimalPolicy, state1 ~ state2, value.var=`Maintenance action`)
optimalPolicy = read_delim("output/optimal_policy.csv", delim=" ") %>%
mutate(`Maintenance action` = paste(maintenance_int_to_string(maintenance1),
maintenance_int_to_string(maintenance2),
sep=" ")) %>%
mutate(`Production action` = paste(production1, production2, sep=" ")) %>%
mutate(state1_max = state1 + 1,
state2_max = state2 + 1)
View(optimalPolicy)
optimalPolicy_wide = dcast(optimalPolicy, state1 ~ state2, value.var=`Maintenance action`)
optimalPolicy_wide = dcast(optimalPolicy, state1 ~ state2, value.var="Maintenance action")
View(optimalPolicy_wide)
################################################################################
# Create R script that reads the solution for all units and creates figures    #
################################################################################
library(tidyverse)
library(reshape2)
# Function to map integer maintenance to string
maintenance_int_to_string = function(maintenance_int) {
if (maintenance_int == 0) {
return("DN")
} else {
return("M")
}
}
maintenance_int_to_string = Vectorize(maintenance_int_to_string, "maintenance_int")
# Load optimal policy
optimalPolicy = read_delim("output/optimal_policy.csv", delim=" ") %>%
mutate(`Maintenance action` = paste(maintenance_int_to_string(maintenance1),
maintenance_int_to_string(maintenance2),
sep=" ")) %>%
mutate(`Production action` = paste(production1, production2, sep=" ")) %>%
mutate(state1_max = state1 + 1,
state2_max = state2 + 1)
# In wide format
optimalPolicy_wide = dcast(optimalPolicy, state1 ~ state2, value.var="Maintenance action")
# Optimal maintenance with rectangles
opt_maintenance_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=`Maintenance action`)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_maintenance_plot2)
ggsave("output/optimal_maintenance_plot.pdf", opt_maintenance_plot2, width=9, height=7)
# Plot optimal production with rectangles
opt_production_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=`Production action`)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_production_plot2)
ggsave("output/optimal_production_plot.pdf", opt_production_plot2, width=9, height=7)
# Combine both plots
################################################################################
# Create R script that reads the solution for all units and creates figures    #
################################################################################
library(tidyverse)
library(reshape2)
# Function to map integer maintenance to string
maintenance_int_to_string = function(maintenance_int) {
if (maintenance_int == 0) {
return("DN")
} else {
return("M")
}
}
maintenance_int_to_string = Vectorize(maintenance_int_to_string, "maintenance_int")
# Load optimal policy
optimalPolicy = read_delim("output/optimal_policy.csv", delim=" ") %>%
mutate(`Maintenance action` = paste(maintenance_int_to_string(maintenance1),
maintenance_int_to_string(maintenance2),
sep=" ")) %>%
mutate(`Production action` = paste(production1, production2, sep=" ")) %>%
mutate(state1_max = state1 + 1,
state2_max = state2 + 1)
# In wide format
optimalPolicy_wide = dcast(optimalPolicy, state1 ~ state2, value.var="Maintenance action")
# Optimal maintenance with rectangles
opt_maintenance_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=`Maintenance action`)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_maintenance_plot2)
ggsave("output/optimal_maintenance_plot.pdf", opt_maintenance_plot2, width=9, height=7)
# Plot optimal production with rectangles
opt_production_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=production1)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_production_plot2)
ggsave("output/optimal_production_plot.pdf", opt_production_plot2, width=9, height=7)
# Combine both plots
################################################################################
# Create R script that reads the solution for all units and creates figures    #
################################################################################
library(tidyverse)
library(reshape2)
# Function to map integer maintenance to string
maintenance_int_to_string = function(maintenance_int) {
if (maintenance_int == 0) {
return("DN")
} else {
return("M")
}
}
maintenance_int_to_string = Vectorize(maintenance_int_to_string, "maintenance_int")
# Load optimal policy
optimalPolicy = read_delim("output/optimal_policy.csv", delim=" ") %>%
mutate(`Maintenance action` = paste(maintenance_int_to_string(maintenance1),
maintenance_int_to_string(maintenance2),
sep=" ")) %>%
mutate(`Production action` = paste(production1, production2, sep=" ")) %>%
mutate(state1_max = state1 + 1,
state2_max = state2 + 1)
# In wide format
optimalPolicy_wide = dcast(optimalPolicy, state1 ~ state2, value.var="Maintenance action")
# Optimal maintenance with rectangles
opt_maintenance_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=`Maintenance action`)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_maintenance_plot2)
ggsave("output/optimal_maintenance_plot.pdf", opt_maintenance_plot2, width=9, height=7)
# Plot optimal production with rectangles
opt_production_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=production1)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_production_plot2)
ggsave("output/optimal_production_plot.pdf", opt_production_plot2, width=9, height=7)
# Combine both plots
################################################################################
# Create R script that reads the solution for all units and creates figures    #
################################################################################
library(tidyverse)
library(reshape2)
# Function to map integer maintenance to string
maintenance_int_to_string = function(maintenance_int) {
if (maintenance_int == 0) {
return("DN")
} else {
return("M")
}
}
maintenance_int_to_string = Vectorize(maintenance_int_to_string, "maintenance_int")
# Load optimal policy
optimalPolicy = read_delim("output/optimal_policy.csv", delim=" ") %>%
mutate(`Maintenance action` = paste(maintenance_int_to_string(maintenance1),
maintenance_int_to_string(maintenance2),
sep=" ")) %>%
mutate(`Production action` = paste(production1, production2, sep=" ")) %>%
mutate(state1_max = state1 + 1,
state2_max = state2 + 1)
# In wide format
optimalPolicy_wide = dcast(optimalPolicy, state1 ~ state2, value.var="Maintenance action")
# Optimal maintenance with rectangles
opt_maintenance_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=`Maintenance action`)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_maintenance_plot2)
ggsave("output/optimal_maintenance_plot.pdf", opt_maintenance_plot2, width=9, height=7)
# Plot optimal production with rectangles
opt_production_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=production1)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_production_plot2)
ggsave("output/optimal_production_plot.pdf", opt_production_plot2, width=9, height=7)
# Combine both plots
################################################################################
# Create R script that reads the solution for all units and creates figures    #
################################################################################
library(tidyverse)
library(reshape2)
# Function to map integer maintenance to string
maintenance_int_to_string = function(maintenance_int) {
if (maintenance_int == 0) {
return("DN")
} else {
return("M")
}
}
maintenance_int_to_string = Vectorize(maintenance_int_to_string, "maintenance_int")
# Load optimal policy
optimalPolicy = read_delim("output/optimal_policy.csv", delim=" ") %>%
mutate(`Maintenance action` = paste(maintenance_int_to_string(maintenance1),
maintenance_int_to_string(maintenance2),
sep=" ")) %>%
mutate(`Production action` = paste(production1, production2, sep=" ")) %>%
mutate(state1_max = state1 + 1,
state2_max = state2 + 1)
# In wide format
optimalPolicy_wide = dcast(optimalPolicy, state1 ~ state2, value.var="Maintenance action")
# Optimal maintenance with rectangles
opt_maintenance_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=`Maintenance action`)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_maintenance_plot2)
ggsave("output/optimal_maintenance_plot.pdf", opt_maintenance_plot2, width=9, height=7)
# Plot optimal production with rectangles
opt_production_plot2 = ggplot(optimalPolicy, aes(xmin=state1, xmax=state1_max,
ymin=state2, ymax=state2_max,
fill=production1)) +
geom_rect() + theme_bw() + theme(panel.grid = element_blank(), panel.border = element_blank()) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
labs(x="State unit 1", y="State unit 2")
print(opt_production_plot2)
ggsave("output/optimal_production_plot.pdf", opt_production_plot2, width=9, height=7)
# Combine both plots
library(tidyverse)
experiments = tibble(ccm = 1.1,
cpm = 1.1,
C = 1.1,
nStates = 1,
dL = 1.1,
pi = 1,
nRates = 1,
mu = 1.1,
var = 1.1,
dT = 1,
beta = 1.1,
alpha = 1.1,
eps = 1.1,
minProb = 1.1,
nUnits = 1)
experiments[-1,]
################################################################################
# R script that creates experiments                                            #
################################################################################
library(tidyverse)
grid_size = 10
base_experiment = tibble(ccm = 1.0,
cpm = 0.2,
C = 0.5,
nStates = 50,
dL = 1.0,
pi = 60,
nRates = 50,
mu = 1.0,
var = 2.0,
dT = 1.0,
beta = 0.1,
alpha = 1.5,
eps = 0.000001,
minProb = 0.99,
nUnits = 2)
experiments = base_experiments
#### Define all experiments ####
# Function to create experiment rows
create_experiments = function(variableName, values) {
new_experiments = base_experiment[rep(1, length(values)),]
new_experiments[[variableName]] = values
return(new_experiments)
}
# Variance experiments
var_options = seq(0.1, 5, length.out = grid_size)
experiments = experimentTable %>%
bind_rows(createExperiments("var", var_options))
#### Output the experiments table ####
write.table(experimentsable, file="data/experiment_input", row.names=FALSE, col.names=FALSE)
################################################################################
# R script that creates experiments                                            #
################################################################################
library(tidyverse)
grid_size = 10
base_experiment = tibble(ccm = 1.0,
cpm = 0.2,
C = 0.5,
nStates = 50,
dL = 1.0,
pi = 60,
nRates = 50,
mu = 1.0,
var = 2.0,
dT = 1.0,
beta = 0.1,
alpha = 1.5,
eps = 0.000001,
minProb = 0.99,
nUnits = 2)
experiments = base_experiments
#### Define all experiments ####
# Function to create experiment rows
create_experiments = function(variableName, values) {
new_experiments = base_experiment[rep(1, length(values)),]
new_experiments[[variableName]] = values
return(new_experiments)
}
# Variance experiments
var_options = seq(0.1, 5, length.out = grid_size)
experiments = experiments %>%
bind_rows(createExperiments("var", var_options))
#### Output the experiments table ####
write.table(experimentsable, file="data/experiment_input", row.names=FALSE, col.names=FALSE)
################################################################################
# R script that creates experiments                                            #
################################################################################
library(tidyverse)
grid_size = 10
base_experiment = tibble(ccm = 1.0,
cpm = 0.2,
C = 0.5,
nStates = 50,
dL = 1.0,
pi = 60,
nRates = 50,
mu = 1.0,
var = 2.0,
dT = 1.0,
beta = 0.1,
alpha = 1.5,
eps = 0.000001,
minProb = 0.99,
nUnits = 2)
experiments = base_experiments
#### Define all experiments ####
# Function to create experiment rows
create_experiments = function(variableName, values) {
new_experiments = base_experiment[rep(1, length(values)),]
new_experiments[[variableName]] = values
return(new_experiments)
}
# Variance experiments
var_options = seq(0.1, 5, length.out = grid_size)
experiments = experiments %>%
bind_rows(create_experiments("var", var_options))
#### Output the experiments table ####
write.table(experiments, file="data/experiment_input", row.names=FALSE, col.names=FALSE)
################################################################################
# R script that creates experiments                                            #
################################################################################
library(tidyverse)
grid_size = 10
base_experiment = tibble(ccm = 1.0,
cpm = 0.2,
C = 0.5,
nStates = 50,
dL = 1.0,
pi = 60,
nRates = 50,
mu = 1.0,
var = 2.0,
dT = 1.0,
beta = 0.1,
alpha = 1.5,
eps = 0.000001,
minProb = 0.99,
nUnits = 2)
experiments = base_experiments
#### Define all experiments ####
# Function to create experiment rows
create_experiments = function(variableName, values) {
new_experiments = base_experiment[rep(1, length(values)),]
new_experiments[[variableName]] = values
return(new_experiments)
}
# Variance experiments
var_options = seq(0.1, 5, length.out = grid_size)
experiments = experiments %>%
bind_rows(create_experiments("var", var_options))
#### Output the experiments table ####
write.table(experiments, file="data/experiment_input", row.names=FALSE, col.names=FALSE)
################################################################################
# R script that creates experiments                                            #
################################################################################
library(tidyverse)
grid_size = 10
base_experiment = tibble(ccm = 1.0,
cpm = 0.2,
C = 0.5,
nStates = 50,
dL = 1.0,
pi = 60,
nRates = 50,
mu = 1.0,
var = 2.0,
dT = 1.0,
beta = 0.1,
alpha = 1.5,
eps = 0.000001,
minProb = 0.99,
nUnits = 2)
experiments = base_experiments
#### Define all experiments ####
# Function to create experiment rows
create_experiments = function(variableName, values) {
new_experiments = base_experiment[rep(1, length(values)),]
new_experiments[[variableName]] = values
return(new_experiments)
}
# Variance experiments
var_options = seq(0.1, 5, length.out = grid_size)
experiments = experiments %>%
bind_rows(create_experiments("var", var_options))
################################################################################
# R script that creates experiments                                            #
################################################################################
library(tidyverse)
grid_size = 10
base_experiment = tibble(ccm = 1.0,
cpm = 0.2,
C = 0.5,
nStates = 50,
dL = 1.0,
pi = 60,
nRates = 50,
mu = 1.0,
var = 2.0,
dT = 1.0,
beta = 0.1,
alpha = 1.5,
eps = 0.000001,
minProb = 0.99,
nUnits = 2)
experiments = base_experiment
#### Define all experiments ####
# Function to create experiment rows
create_experiments = function(variableName, values) {
new_experiments = base_experiment[rep(1, length(values)),]
new_experiments[[variableName]] = values
return(new_experiments)
}
# Variance experiments
var_options = seq(0.1, 5, length.out = grid_size)
experiments = experiments %>%
bind_rows(create_experiments("var", var_options))
#### Output the experiments table ####
write.table(experiments, file="data/experiment_input", row.names=FALSE, col.names=FALSE)
################################################################################
# R script that creates experiments                                            #
################################################################################
library(tidyverse)
grid_size = 10
base_experiment = tibble(ccm = 1.0,
cpm = 0.2,
C = 0.5,
nStates = 50,
dL = 1.0,
pi = 60,
nRates = 50,
mu = 1.0,
var = 2.0,
dT = 1.0,
minProb = 0.99,
beta = 0.1,
alpha = 1.5,
eps = 0.000001,
nUnits = 2)
experiments = base_experiment
#### Define all experiments ####
# Function to create experiment rows
create_experiments = function(variableName, values) {
new_experiments = base_experiment[rep(1, length(values)),]
new_experiments[[variableName]] = values
return(new_experiments)
}
# Variance experiments
var_options = seq(0.1, 5, length.out = grid_size)
experiments = experiments %>%
bind_rows(create_experiments("var", var_options))
#### Output the experiments table ####
write.table(experiments, file="data/experiment_input", row.names=FALSE, col.names=FALSE)
